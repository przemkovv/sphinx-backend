#%RAML 1.0
---
title: Sphinx Backend REST API
baseUri: http://localhost:9998/{version}
version: v1
mediaType: application/json
protocols: [HTTP]

types:
  User:
    properties:
      id?: number
      username: string
      email: string
      role: 
        enum: [ student, teacher, admin ]
  Users:
    type: User[]
    minItems: 0
    uniqueItems: true

  Course:
    properties:
        id?: number
        title: string
        description?: string
        owner: Users
        modules?: Modules
  Courses:
    type: array
    items: Course
    minItems: 0
    uniqueItems: true

  Module:
    properties:
      id?: number
      title: string
      description?: string
      order: number
      tasks?: Tasks
      course?: Course
  Modules:
    type: Module[]
    minItems: 0
    uniqueItems: true

  Task:
    properties:
      id?: number
      title: string
      description?: string
      order: number
      tests?: Tests
      module?: Module
      language:
        enum: [ cpp ]
  Tasks:
    type: Task[]
    minItems: 0
    uniqueItems: true

  Test:
    properties:
      id?: number
      task?: Task
      stdin: string
      expected_stdout: string
      expected_stderr: string
  Tests:
    type: Test[]
    minitems: 0
    uniqueItems: true

  Solution: 
    properties:
      id?: number
      task: Task
      author: User
      date:
        type: datetime
        format: rfc2616
      files?: Files
      test_results: TestResults
      language:
        enum: [ cpp ]

  Solutions:
    type: Solution[]
    minItems: 0
    uniqueItems: true

  File:
    properties:
      id?: number
      solution?: Solution
      filename: string
      content: string

  Files:
    type: File[]
    minItems: 0
    uniqueItems: true

  TestResult:
    properties:
      id?: number
      solution: Solution
      test: Test
      date:
        type: datetime
        format: rfc2616
      passed: boolean
      stdout?: string
      stderr?: string

  TestResult:
    type: TestResults[]
    minItems: 0
    uniqueItems: true






/users:
  description: Manage users.
  get:
    description: Get list of users.
    responses:
      200:
        body:
          application/json:
            type: Users

  post:
    description: Create a user.
    body:
      type: User | Users
  /{user_id}:
    get:
      description: Get information about user {user_id}.
      responses:
        200:
          body:
            application/json:
              type: User
    put:
      description: Modify user profile..
      body:
        application/json:
          type: User

/courses:
  description: Manages courses.
  get:
    description: List courses.
    responses:
      200:
        body:
          application/json:
            type: Courses
  post:
    description: Create course.
    body:
      application/json:
        type: Course
  /{course_id}:
    get:
      description: Get course information.
      responses:
        200:
          body:
            application/json:
              type: Course
    /modules:
      get:
        description: Get modules lists.
        responses:
          200:
            body:
              application/json:
                type: Modules
      post:
        description: Create module.
        body:
          application/json:
            type: Module
      /{module_id}:
        /tasks:
          get:
            description: Get list of tasks in module.
            body:
              application/json:
                type: Module
          /{task_id}:
            get:
              description: Get task information.
            /solutions:
              get:
                description: List submitted solutions.
                post:
                  desciption: Submit a solution to the task.
              /{solution_id}:
                get:
                  description: Get info about solution.


